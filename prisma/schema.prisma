generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  commentId       Int       @id @default(autoincrement()) @map("comment_id")
  reviewId        Int       @map("review_id")
  memberId        Int       @map("member_id")
  parentCommentId Int?      @map("parent_comment_id")
  content         String
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  member          member    @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comment         comment?  @relation("commentTocomment", fields: [parentCommentId], references: [commentId], onDelete: NoAction, onUpdate: NoAction)
  otherComment    comment[] @relation("commentTocomment")
  review          review    @relation(fields: [reviewId], references: [reviewId], onDelete: NoAction, onUpdate: NoAction)
}

model member {
  id         Int         @id @default(autoincrement())
  username   String      @unique @db.VarChar(50)
  email      String      @unique @db.VarChar(50)
  dob        DateTime    @db.Date
  password   String      @db.VarChar(255)
  role       Int
  gender     String      @db.Char(1)
  comment    comment[]
  memberRole memberRole  @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_member_role_id")
  review     review[]
  saleOrder  saleOrder[]

  cart cart[]
}

model memberRole {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(25)
  member member[]

  @@map("member_role")
}

model product {
  id             Int             @id @default(autoincrement())
  name           String?         @db.VarChar(255)
  description    String?
  unitPrice      Decimal         @map("unit_price") @db.Decimal
  stockQuantity  Decimal         @default(0) @map("stock_quantity") @db.Decimal
  country        String?         @db.VarChar(100)
  productType    String?         @map("product_type") @db.VarChar(50)
  imageUrl       String?         @default("/images/product.png") @map("image_url") @db.VarChar(255)
  manufacturedOn DateTime?       @map("manufactured_on") @db.Timestamp(6)
  review         review[]
  saleOrderItem  saleOrderItem[]

  cartItem cartItem[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model review {
  reviewId  Int       @id @default(autoincrement()) @map("review_id")
  memberId  Int       @map("member_id")
  productId Int       @map("product_id")
  orderId   Int       @map("order_id")
  content   String
  rating    Int?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  comment   comment[]
  member    member    @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  saleOrder saleOrder @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product   product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model saleOrder {
  id            Int             @id @default(autoincrement())
  memberId      Int?            @map("member_id")
  orderDatetime DateTime        @map("order_datetime") @db.Timestamp(6)
  status        String?         @db.VarChar(10)
  review        review[]
  member        member?         @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_member")
  saleOrderItem saleOrderItem[]
  discounts     orderDiscount[]

  @@map("sale_order")
}

model saleOrderItem {
  id          Int       @id @default(autoincrement())
  saleOrderId Int       @map("sale_order_id")
  productId   Int       @map("product_id")
  quantity    Decimal   @db.Decimal
  product     product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_item_product")
  saleOrder   saleOrder @relation(fields: [saleOrderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_item_sale_order")

  @@map("sale_order_item")
}

model cart {
  id         Int         @id @default(autoincrement())
  memberId   Int         @map("member_id")
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamp(6)

  member     member      @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cartItems  cartItem[]
  discounts  cartDiscount[]

  @@map("cart")
}

model cartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  productId Int      @map("product_id")
  quantity  Decimal  @db.Decimal

  cart      cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("cart_item")
}

model discount {
  id         Int           @id @default(autoincrement())
  code       String        @unique @db.VarChar(50)
  type       DiscountType
  value      Decimal       @db.Decimal
  expiresAt  DateTime?     @map("expires_at") @db.Timestamp(6)

  carts      cartDiscount[]
  orders     orderDiscount[]

  @@map("discount")
}

model cartDiscount {
  cartId     Int
  discountId Int

  cart       cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discount   discount @relation(fields: [discountId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cartId, discountId])
  @@map("cart_discount")
}

model orderDiscount {
  orderId    Int
  discountId Int

  order      saleOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discount   discount  @relation(fields: [discountId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([orderId, discountId])
  @@map("order_discount")
}

enum DiscountType {
  product
  shipping
}
